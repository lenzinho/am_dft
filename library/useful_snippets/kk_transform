      SUBROUTINE KRAMERS(X,AM,DE,N,A,FZ,FC)
      USE prec
      USE constant

!     Computes the integral of  dY F(Y)/(Y-X)  from A to N*DE
!     Special highly optimized version of Birgits code for uniform meshes
!     The mesh spacing is given by DE
!     The result is FC
!     The integrand is in AM(:)
!     its value at A is FZ
!     is must hold AIMAG(X)>0

      IMPLICIT NONE

      REAL(q), PARAMETER :: CO=1._q, CH=-0.5_q, CT=1._q/3._q, CQ=-0.25_q
      REAL(q), PARAMETER :: ZCRIT1=2.E-3_q, ZCRIT2=1.E-2_q
! global
      INTEGER          :: N
      REAL(q)          :: AM(N),A,FZ,DE
      COMPLEX(q)       :: X,FC
! local
      INTEGER   , SAVE :: J,N1MIN,N2MIN,N1MAX,N2MAX
      REAL(q)   , SAVE :: ZABS,T
      COMPLEX(q), SAVE :: FC2,B,C,D,F,H,Z

      IF (ABS(A)<1.E-10_q) GOTO 111
      F=A-X
      B=LOG(1._q-A/F)
      FC=FZ*(-1._q+LOG((-X)/F)*(X/A))
! code for J=1 (taken out of J-loop below since first point may be non-uniform)
      H=-X
      D=DE-X
      Z=D/H
      C=LOG(Z)
      FC=FC+AM(1)*(C*D/DE+B*F/A)
      B=C
      F=H
      FC2=(0._q,0._q)
! Since the evaluation of LOG(X) is rather time consuming it is more efficient
! to replace the LOG function call by a (4th/3rd order) Taylor series where the
! argument of the LOG function is close to one. Therefore, the remaining loop
! J=2,N-1 is divided into appropriate regions where the LOG function has to be
! evaluated exactly or where it can be replaced by a simple 4th or 3rd order
! Taylor series. The regions are defined by the parameters ZCRIT1 and ZCRIT2.
! With the current setting one should expect an accuray of the order 1E-8 or
! better. The speedup can be significant (e.g. a factor 8 on an IBM RS6000).
      T    =REAL(X, KIND=q)/DE + 1._q
      N1MIN=  FLOOR(T-1._q/ZCRIT1)
      N2MIN=  FLOOR(T-1._q/ZCRIT2)
      N2MAX=CEILING(T+1._q/ZCRIT2)
      N1MAX=CEILING(T+1._q/ZCRIT1)
! region 1: large negative values H, D/H very close to 1, 3rd order series
      DO J=2,MIN(N1MIN,N-1)
         H=D
         D=D+DE
         Z=DE/H
         C=Z*(CO+Z*(CH+Z*CT))
         FC2=FC2+AM(J)*(C*D-B*F)
         B=C
         F=H
      ENDDO
! region 2: intermediate negative values H, D/H close to 1, 4th order series
      DO J=MAX(N1MIN+1,2),MIN(N2MIN,N-1)
         H=D
         D=D+DE
         Z=DE/H
         C=Z*(CO+Z*(CH+Z*(CT+Z*CQ)))
         FC2=FC2+AM(J)*(C*D-B*F)
         B=C
         F=H
      ENDDO
! region 3: small values of H, D/H rather distant to 1, use exact LOG function
      DO J=MAX(N2MIN+1,2),MIN(N2MAX-1,N-1)
         H=D
         D=D+DE
         Z=D/H
         C=LOG(Z)
         FC2=FC2+AM(J)*(C*D-B*F)
         B=C
         F=H
      ENDDO
! region 4: intermediate positive values H, D/H close to 1, 4th order series
      DO J=MAX(N2MAX,2),MIN(N1MAX-1,N-1)
         H=D
         D=D+DE
         Z=DE/H
         C=Z*(CO+Z*(CH+Z*(CT+Z*CQ)))
         FC2=FC2+AM(J)*(C*D-B*F)
         B=C
         F=H
      ENDDO
! region 5: large positive values H, D/H very close to 1, 3rd order series
      DO J=MAX(N1MAX,2),N-1
         H=D
         D=D+DE
         Z=DE/H
         C=Z*(CO+Z*(CH+Z*CT))
         FC2=FC2+AM(J)*(C*D-B*F)
         B=C
         F=H
      ENDDO
! add last point, perform global sum and divide by PI
      FC=(FC+FC2/DE+AM(N)*(1._q-B*F/DE))/PI

      RETURN
 111  WRITE(*,112)
 112  FORMAT('  Error subroutine KRAMERS: A too small.')
      STOP
      END