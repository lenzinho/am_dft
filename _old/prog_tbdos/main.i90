# 1 "main.f90"
!****************************************************************************
!
!  PROGRAM: tbdos
!
!  PURPOSE: Generate tight binding DOS, compute fermi energy if number of
!           electrons are supplied, compute total band energy.
!
!****************************************************************************
    program main
!
    use am_options
    use am_symmetry
    use am_shells
    use am_tight_binding
    use am_brillouin_zone
    use am_dos
!
    implicit none
!
    type(am_class_options)      :: opts
    type(am_class_prim_pair)    :: pp   ! primitive pairs
    type(am_class_tightbinding) :: tb   ! tight binding
    type(am_class_ibz)          :: ibz  ! symmetry reduced monkhorst pack mesh (irreducible wedge)
    real(dp), allocatable :: y(:)
!
! <LOAD OPTIONS>
    call opts%parse_command_line_tbdos() 
! <LOAD>
! load tight binding model
        call tb%load(fname='save.tb')
! load primitive pair info
        call pp%load(fname='save.pp')
! load irreducible monkhorst-pack k-point mesh (generated with program ibz)
        call ibz%load(fname='save.ibz')
! <MAIN>
! read irreducible matrix elements from 'infile.tb_vsk'
        call tb%read_irreducible_matrix_element(fname='infile.tb_vsk')
! get hamiltonian
        call tb%get_hamiltonian(pp=pp,bz=ibz)
! get dispersion on irreducible monkhorst-pack k-point mesh
        call tb%get_dispersion()
! get fermi energy
        if (abs(opts%nelecs).lt.tiny) then
            call tb%get_fermi_energy(ibz=ibz,nelecs=opts%nelecs)
            if (opts%verbosity.ge.1.) then
                write(*,'(a,a)') flare, 'electrons = '//tostring( opts%nelecs )
                write(*,'(a,a)') flare, 'fermi energy = '//tostring( tb%dos%Ef )
                write(*,'(a,a)') flare, 'total energy = '//tostring( sum(tb%dos%D * tb%dos%E, tb%dos%E.le.tb%dos%Ef) )
            endif
! shift dispersion to set fermi energy at zero
            tb%dr%E = tb%dr%E - tb%dos%Ef
        endif
! get density of states
        if (opts%nEs.ne.0) then
            call tb%get_dos(ibz=ibz, E=linspace(opts%Emin,opts%Emax,opts%nEs) ,opts=opts)
        else
            call tb%get_dos(ibz=ibz, opts=opts)
        endif
! do it a couple of different ways and show the results
        if (opts%verbosity.ge.1) then
! kpoint properties
            write(*,*) flare, 'density of states'
            write(*,*) flare, 'degauss = '//tostring(opts%degauss)
            call disp_indent()
            call disp(title='E'          ,style='underline',X=tb%dos%E               ,fmt='f10.5',advance='no')
            y = get_dos_quick(Ep=tb%dos%E,E=tb%dr%E,kptw=ibz%w,degauss=opts%degauss/3.0_dp,flags='fermi')
            call disp(title='[fermi]'    ,style='underline',X=y                      ,fmt='f10.5',advance='no')
            y = get_dos_quick(Ep=tb%dos%E,E=tb%dr%E,kptw=ibz%w,degauss=opts%degauss,flags='mp')
            call disp(title='[meth-pax]' ,style='underline',X=y                      ,fmt='f10.5',advance='no')
            y = get_dos_quick(Ep=tb%dos%E,E=tb%dr%E,kptw=ibz%w,degauss=opts%degauss,flags='mv')
            call disp(title='[marz-van]',style='underline',X=y                       ,fmt='f10.5',advance='no')
            y = get_dos_quick(Ep=tb%dos%E,E=tb%dr%E,kptw=ibz%w,degauss=opts%degauss,flags='gauss')
            call disp(title='[gauss]'   ,style='underline',X=y                       ,fmt='f10.5',advance='no')
            y = get_dos_quick(Ep=tb%dos%E,E=tb%dr%E,kptw=ibz%w,degauss=opts%degauss,flags='lorentz')
            call disp(title='[lorentz]' ,style='underline',X=y                       ,fmt='f10.5',advance='no')
            y = tb%dos%D
            call disp(title='[blochl]'  ,style='underline',X=y                       ,fmt='f10.5',advance='yes')
        endif
!<SAVE>
        call tb%dos%save(fname='save.dos')
! <CLEAN EXIT>
    if (opts%verbosity.ge.1) call print_title('Done!')
!
    end program







