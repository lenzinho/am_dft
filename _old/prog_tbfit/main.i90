# 1 "main.f90"
!****************************************************************************
!
!  PROGRAM: tbfit
!
!  PURPOSE: Fit DFT dispersion with tight binding model.
!
!****************************************************************************
    program main
!
    use am_options
    use am_unit_cell
    use am_symmetry
    use am_shells
    use am_symmetry_tensor
    use am_tight_binding
    use am_brillouin_zone
    use am_dft
!
    implicit none
!
    type(am_class_options)      :: opts
    type(am_class_vasp)         :: dft
    type(am_class_prim_pair)    :: pp
    type(am_class_tightbinding) :: tb
!
! load options
    call opts%parse_command_line_tbfit()
! load tb
    call tb%load(fname='save.tb')
! load primitive pairs
    call pp%load(fname='save.pp')
! load DFT dispersion
    if    (index(opts%flags,'file:eigenval').ne.0) then
! opts%flags can contain minimum/fermi
        call dft%load(opts=opts, flags='dispersion'//trim(opts%flags))
    elseif (index(opts%flags, 'procar').ne.0) then
        stop 'ERROR: procar fit not yet implement'
    elseif (index(opts%flags, 'wavecar').ne.0) then
        call dft%load(opts=opts, flags='dispersion'//trim(opts%flags))
        stop 'ERROR: wavecar not yet implemented'
    else
        stop 'fit_tb /= eigenval or procar!'
    endif
! optimize from input matrix elements or from scratch?
    if (fexists('infile.tb_vsk').ne.0) then
! read matrix elements
        call tb%read_irreducible_matrix_element(fname='infile.tb_vsk')
! display input file on stdout
        call print_title('Input tight-binding matrix elements')
        call disp_indent()
        call disp(x=tb%V,title='V',style='underline',advance='no')
        call disp(x=tb%V_ind(1,:),title='shell',style='underline',advance='no')
        call disp(x=tb%V_ind(2,:),title='alpha',style='underline',advance='no')
        call disp(x=tb%V_ind(3,:),title='beta' ,style='underline',advance='yes')
! optimize from input
        call tb%optimize_matrix_element(dft=dft, pp=pp, opts=opts, flags='input')
    else
! set matrix elements at zero
        call tb%set_matrix_element(flags='zero')
! optimize from scratch
        call tb%optimize_matrix_element(dft=dft, pp=pp, opts=opts, flags='shell_progressive')
    endif
!
    call tb%write_irreducible_matrix_element()
!
    if (opts%verbosity.ge.1) call print_title('Done!')
!
    end program




